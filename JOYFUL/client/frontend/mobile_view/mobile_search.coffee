churchNameSearchSub = null
churchNameCampaignsSub = null
allChurchSub = null

stopAnimation = (marker, infowin, map) ->
  setTimeout (->
    marker.setAnimation null
    infowin.open map, marker
    return
  ), 750
  return

stopAnimationNoInfo = (marker) ->
  setTimeout (->
    marker.setAnimation null
    return
  ), 750
  return

Template.mobileSearch.onCreated ->
Template.mobileSearch.onRendered ->
  $('body').addClass 'landing-page'
  $('html, body').animate scrollTop: 0
  # $('body').scrollspy({
  #     target: '.navbar-fixed-top',
  #     offset: 80
  # });
  Session.set 'code', ''
  Session.set 'name', ''
  Session.set 'churchesList', []
  Session.set 'campaignsList', []
  Tracker.autorun ->
    churchNameSearchSub = Meteor.subscribe('churchNameSearch', Session.get('name'), ->
      Session.set 'churchesList', Meteor.users.find(roles: 'church').fetch()
      return
    )
    churchNameCampaignsSub = Meteor.subscribe('churchNameCampaigns', Session.get('code'), ->
      Session.set 'campaignsList', ChurchCodes.find().fetch()
      return
    )
    return
  Meta.setTitle 'Search organization- Joyful Giver'
  Meta.set 'og:title', 'Search organization- Joyful Giver'
  return
Template.mobileSearch.events
  'click #find': ->
    Session.set 'code', ''
    Session.set 'name', ''
    churchNameSearchSub.stop()
    churchNameCampaignsSub.stop()
    Session.set 'churchesList', []
    Session.set 'campaignsList', []
    name = $('#name').val()
    code = $('#name').val()
    if !name
      bootbox.alert 'Please enter name or code.'
      Session.set 'code', ''
      Session.set 'name', ''
    else
      Session.set 'name', name
      Session.set 'code', code
    $('[href=\'#tab-3\']').click()
    return
  'click .recenter': (event, template) ->

    ###
          var latLng = this.profile.loc.coordinates;
          var map = GoogleMaps.maps.churchMap.instance;
          var orgId = this._id;
          var currID = "";

          for (var n = 0; n < allMapMarkers.length; n++) {
              currID = allMapMarkers[n].id;
              mymarker = allMapMarkers[n].marker;
              infowin = allMapMarkers[n].iw;
              if (currID === this._id)  {
                    map.setCenter(mymarker.position);
                    mymarker.setAnimation(google.maps.Animation.BOUNCE);
                    stopAnimation(mymarker,infowin,map);
              } else {
                    infowin.close(map, mymarker);
              }
          }
    ###

    return
  'click .coderecenter': (event, template) ->

    ###
          var map = GoogleMaps.maps.churchMap.instance;
          var currID = "";
          for (var n = 0; n < allMapMarkers.length; n++) {
              currID = allMapMarkers[n].id;
              mymarker = allMapMarkers[n].marker;
              infowin = allMapMarkers[n].iw;
              if (currID === this.church)  {
                    mymarker.setAnimation(google.maps.Animation.BOUNCE);
                    stopAnimationNoInfo(mymarker);
                    map.setCenter(mymarker.position);
              } else {
                    infowin.close(map, mymarker);
              }
          }
    ###

    return
  'click .add': (event, template) ->
    code = event.currentTarget.id
    if code == 'name'
      code = null
    Meteor.call 'addMyChurches', @_id, code, (err, res) ->
      if err
        alert 'There was an error adding this organization. Please try again.'
      else
        alert 'This organization has been added to your account.'
      return
    return
Template.mobileSearch.helpers
  churches: ->
    #console.log("WTF", Session.get('churchesList') );
    Session.get 'churchesList'
  campaigns: ->
    #console.log(this);
    #console.log("WTF2", Session.get('campaignsList') );
    Session.get 'campaignsList'
  'codeChurchName': ->
    churchToFind = Meteor.users.find(_id: @church).fetch()
    if churchToFind[0]
      churchToFind[0].profile.churchName
    else
      ''
  'codeCityName': ->
    churchToFind = Meteor.users.find(_id: @church).fetch()
    if churchToFind[0]
      churchToFind[0].profile.address.city
    else
      ''
  'codeStateName': ->
    churchToFind = Meteor.users.find(_id: @church).fetch()
    if churchToFind[0]
      churchToFind[0].profile.address.state
    else
      ''
  'churchProfilePic': ->
    churchToFind = Meteor.users.find(_id: @church).fetch()
    if churchToFind[0]
      pic = churchToFind[0].profile.profilePic
      retString = '<div style="height:125px; overflow:hidden;  background: #ffffff url(' + pic + ') no-repeat right top;"></div>'
      retString
    else
      null
  'geolocationError': ->
    #debugger;
    error = Geolocation.error()
    error and error.message

# ---
# generated by js2coffee 2.2.0